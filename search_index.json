[
["index.html", "1 BioQC GEO Analysis", " 1 BioQC GEO Analysis Systematically testing the GEO for tissue heterogeneity. Manuscript in preparation "],
["setup-database.html", "2 Setup Database 2.1 Tables explained 2.2 Import GEOmetadb 2.3 Import BioQC data", " 2 Setup Database We store meta information for GEO samples and BioQC results in an Oracle 11g database. We combine the metadata from GEOmetadb with tables to store signature scores generated with BioQC and manually curated annotations. GEOmetadb is an SQLite database containing metadata associated with samples and studies from GEO. Figure 2.1: Entitiy relationship diagram of the BioQC database scheme. Click the here for an enlarged version. Greenish tables are imported from GEOmetadb. Yellowish tables are additional tables designed for this study. Three dots (…) indicate columns from GEOmetadb which are omitted in the visualisation because they are not relevant for this study. 2.1 Tables explained 2.1.1 GEOmetadb BIOQC_GSM: from GEOmetadb, meta information for all Samples in GEO BIOQC_GPL: from GEOmetadb, list of all platforms (e.g. different types of microarrays) referenced in GEO. BIOQC_GSE: from GEOmetadb, list of Series (collections of samples) in GEO. 2.1.2 Tissue Annotation The annotation of tissues is inconsistent within GEO. A “liver” sample can be termed e.g. “liver”, “liver biopsy” or “primary liver”. We therefore need a way to “normalize” the tissue name. We did this manually for the most abundant tissues in this Excel sheet which is then imported into the BIOQC_NORMALIZE_TISSUES table. BIOQC_TISSUES is simply a unique list of all curated tissues. 2.1.3 Signatures Signatures are essentially a list of genes, which are over-represented in a certain tissue, cell type, pathway, etc. A common way to save such signatures is the GMT file format. These GMT files can be imported into BIOQC_SIGNATURES. 2.1.4 Expected Signatures In order to find out which samples are ‘contamined’ by other tissues, we first need to define which signatures we would ‘expect’ in a certain tissue. We therefore manually mapped signatures to the respective tissue type in this Excel sheet. For example, we map the signatures Intestine_Colon_cecum_NR_0.7_3 and Intestine_Colon_NR_0.7_3 to colon. Moreover, we ran into the issue, that some tissue signatures are not as specific as the annotation in the GEO. We therefore curated so-called tissue sets. For example, it is hard to distinguish jejunum from colon, but easy to distinguish the two from other tissues. We therefore created a tissue set intestine, which contains both jejunum and colon and references all signatures associated with the two tissues. This information is part of the same Excel sheet which we imported into BIOQC_TISSUE_SET. 2.1.5 Results Our analysis creates a p-value for each sample in BIOQC_GSM and each signature in BIOQC_SIGNATURES. These p-values are stored in BIOQC_RES. 2.2 Import GEOmetadb First, we need to extract a list of tables: gdb = dbConnect(SQLite(), file.path(DATA_DIR, &quot;geometabase/GEOmetadb.sqlite&quot;)) tables = dbListTables(gdb) writeLines(tables, file(file.path(DATA_DIR, &quot;geometabase/tables.txt&quot;))) Then, we use a conversion script to export the SQL schema and the tables as csv, which can be easily imported into the Oracle DBS. We adjusted the GEOmetadb schema to match Oracle datatypes. Once the tables are imported, we check if all the tables have the same number of rows: # check for consistency for(table in tables) { count.query = sprintf(&quot;select count(*) from %s&quot;, table) count.query.ora = sprintf(&quot;select count(*) from bioqc_%s&quot;, table) print(count.query) expect_equal(dbGetQuery(gdb, count.query)[[1]], dbGetQuery(mydb, tolower(count.query.ora))[[1]]) } 2.2.1 Fix foreign key constraints Unfortunately, foreign key constraints are not enabled in the GEOmetadb SQLite database. It turned out that the GEOmetadb is not entirely consistent when trying to add such constraints in Oracle. We fixed missing parent keys by adding “stub” entries to the tables. The procedure is documented in this SQL script. 2.2.2 Extract Tissue annotation The tissue annotation for each sample is hidden in the characteristics_ch1 column of the BIOQC_GSM table. Since this information is essential for our study, we parsed it into a separate column using a regular expression. The procedure is documented in this SQL script. 2.2.3 Load annotation information To run BioQC, gene symbols need to be annotated in the gene expression matrix. To retrieve gene symbols, we are aware of two feasible possibilities: the Bioconductor annotation packages (listed in GEOmetadb gpl.bioc_package) use the GEO annot_gpl files (“in general available for all GSE that are referenced by a GDS”1) To find out for which GSE in particular the latter option exists, we parsed the directory structure of the GEO ftp server: lftp -c &quot;open ftp://ftp.ncbi.nlm.nih.gov/geo/platforms/ &amp;&amp; find &amp;&amp; exit&quot; &gt; gpl_annot_ftp_tree.txt grep annot.gz gpl_annot_ftp_tree.txt | cut -d&quot;/&quot; -f5 | cut -d&quot;.&quot; -f1 &gt; gpl_annot.txt We add this information the the BIOQC_GPL table as a boolean flag indicating whether the respective platform has an annotation file. # tmp table sql = &quot;create table bioqc_gpl_annot(gpl varchar2(10) primary key, has_annot number(1))&quot; dbSendUpdate(mydb, sql) annot = read.table(&quot;db/data/gpl_annot.txt&quot;) annot = cbind(annot, rep(1, length(annot))) colnames(annot) = c(&quot;1&quot;, &quot;2&quot;) dbAppendDf(&quot;BIOQC_GPL_ANNOT&quot;, annot) # update gpl from tmp table sqlUpdateGpl = &quot; update bioqc_gpl g set has_annot = (select has_annot from bioqc_gpl_annot a where g.gpl = a.gpl)&quot; dbSendUpdate(mydb, sqlUpdateGpl) # drop tmp table sql = &quot;drop table bioqc_gpl_annot&quot; dbSendUpdate(mydb, sql) We compared the two approaches in Sample Selection. 2.3 Import BioQC data We install the BioQC schema using this SQL script. 2.3.1 Signatures Import signatures into the database and create a single, consolidated gmt file. Tissue signature relevant for this study are expr.tissuemark.affy.roche.symbols.gmt and the gtex signatures. download.file(&quot;http://bioinfo.bas.roche.com:8080/apps/gsea/genesets/exp.tissuemark.bioqc.roche.symbols.gmt&quot;, &quot;data/expr.tissuemark.affy.roche.symbols.gmt&quot;) gmt2db(&quot;data/expr.tissuemark.affy.roche.symbols.gmt&quot;) gmt2db(&quot;../BioQC_correlated-pathways/go.bp.roche.symbols.gmt.uniq&quot;) gmt2db(&quot;../BioQC_correlated-pathways/MetaBase.downstream.expression.gmt&quot;) gmt2db(&quot;../BioQC_correlated-pathways/path.ronet.roche.symbols.gmt.ascii&quot;) gmt2db(&quot;../gene-set-study/data/gtex/gtex_ngs_0.7_3.gmt&quot;) gmt2db(&quot;../gene-set-study/data/gtex/gtex_ngs_0.85_5.gmt&quot;) db2gmt(&quot;results/gmt_all.gmt&quot;) 2.3.2 Tissue Annotation Import the manually curated tissues from Excel into the database. normalized_tissues = data.table(read_excel(&quot;manual_annotation/nosrmalize_tissues.xlsx&quot;)) tissues = unique(normalized_tissues[!is.na(TISSUE_NORMALIZED),&quot;TISSUE_NORMALIZED&quot;, with=FALSE]) tab_normalized = normalized_tissues[!is.na(TISSUE_NORMALIZED),c(&quot;TISSUE&quot;, &quot;TISSUE_NORMALIZED&quot;), with=FALSE] dbAppendDf(&quot;BIOQC_TISSUES&quot;, tissues) dbAppendDf(&quot;BIOQC_NORMALIZE_TISSUES&quot;, tab_normalized) 2.3.3 Tissue Sets Import the manually curated tissue sets from Excel into the database. bioqc_solid = read_excel(&quot;manual_annotation/tissue_sets.xlsx&quot;, sheet = 1) gtex_solid = read_excel(&quot;manual_annotation/tissue_sets.xlsx&quot;, sheet=2) gtex_all = read_excel(&quot;manual_annotation/tissue_sets.xlsx&quot;, sheet=3) signatureset2db(bioqc_solid, &quot;bioqc_solid&quot;) signatureset2db(gtex_solid, &quot;gtex_solid&quot;) signatureset2db(gtex_all, &quot;gtex_all&quot;) https://bioconductor.org/packages/release/bioc/manuals/GEOquery/man/GEOquery.pdf↩ "],
["sample-selection.html", "3 Sample Selection and processing 3.1 Required annotation 3.2 Processing Samples with BioQC 3.3 Excluding multi channel microarrays 3.4 Organism selection. 3.5 Tissue selection", " 3 Sample Selection and processing Here, we document the sample selection process before running BioQC. 3.1 Required annotation A sample is usable for this study, if the gene symbos are annotated (requirement to run BioQC) the tissue of origin is annotated (requirment to draw conclusions about contamination) We consider two approaches for annotating gene symbols: Using the Bioconductor AnnotationDbi package. The GEOmetadb provides a mapping of the GPL identifier to these packages. Using the annotGPL=TRUE option of GEOquery’s getGEO. This requires an annotation file being available for the respective platform. We retrieved a list of the available annoataion files in an earlier step. We compare the two methods with respect to the amount of usable samples that we can get. First we need to run the sql-script annotation_stats which will create views summarizing the amount of usable samples. From these views, we can calculate a Venn diagram: The getGEO method appears to be the more powerful method. Ideal would be a combination of the two, however, for the sake of simplicity, we stick to getGEO, loosing 499 studies (35602 samples). This leaves us with the following filtering result: comment GSM GSE total 1945417 73719 tissue annotated 760798 24267 annotation file available 768346 31579 tissue and annotation file 275206 9632 3.1.1 Export list of samples We store the respective gse identifiers in results/gse_lists/gse_tissue_annotation.txt: sqlGse = &quot; select distinct gse from ( select * from bioqc_studies_has_tissue intersect select * from bioqc_studies_has_annot) u&quot; gse = dbGetQuery(mydb, sqlGse) writeLines(gse$GSE, file(gse.file)) 3.2 Processing Samples with BioQC The following processes are ressource intensive, therefore we execute them on high performance cluster (HPC). We use chunksub to distribute the list of sample ids to the workers. This involves four major steps which are also documented in the project’s Makefile. We download the studies with GEOquery and store them as R ExpressionSet using geo_to_eset.R. For some packages, the download is not successful. We annotated human orthologous genes for all studies using ribiosAnnotation in annotate_eset.R. This is necessary as the tissue signatures are built on a human dataset. The annotation failes for species which are not in the ribios database. We run BioQC on these studies use run_bioqc.R. Finally, we prefilter BioQC’s results for having a p-value of at most 0.05 and import them into the database. After failures, we are left with the following number of studies/samples: Although we lost a considerable amount of studies, we only lost a few samples. Apparently, the respective studies were relatively small. 3.3 Excluding multi channel microarrays Multi channel microarrays date back to the early age of gene expression studies. They don’t provide absolute gene expression data and are not meaningful outside their experimental context. We therefore exclude these experiments 3.4 Organism selection. We were interested in the organism distribution. Results suggest that it makes sense to limit the samples to the three main organisms: H. sapiens, M. musculus, R. norvegicus. This makes also sense as these species are closesly related and therefore the signatures are more likely to translate within these species. We are left with the following amount of samples: We create a materialized view BIOQC_RES_FIL with bioqc results that are filted according to these criteria in db/views/bioqc_res_fil.sql. Make sure the results are identical: 3.5 Tissue selection Number of samples per tissue: "]
]
